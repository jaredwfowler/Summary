#version 330 core

// Interpolated values from the vertex shaders
in vec2 UV;
in vec3 Position_worldspace;
in vec3 Normal_cameraspace;
in vec3 EyeDirection_cameraspace;
in vec3 LightDirection_cameraspace;
in vec4 ShadowCoord;

// Ouput data
layout(location = 0) out vec4 color;

// Values that stay constant for the whole mesh.
uniform sampler2D Texture_0;
uniform sampler2D Texture_1;
uniform sampler2D Texture_2;
uniform sampler2DShadow DepthTexture_0;
uniform mat4 MV;
uniform mat4 Light_0;

void main(){

   vec3 LightPos = vec3(Light_0[0].x, Light_0[0].y, Light_0[0].z);
	vec3 LightColor = vec3(Light_0[1].x, Light_0[1].y, Light_0[1].z);
	float LightPower = Light_0[0][3];

	// Distance to the light
	float distance = length( LightPos.xyz - Position_worldspace );

	// Normal of the computed fragment, in camera space
	vec3 n = normalize( Normal_cameraspace );
	// Direction of the light (from the fragment to the light)
	vec3 l = normalize( LightDirection_cameraspace );
	// Cosine of the angle between the normal and the light direction, 
	// clamped above 0
	//  - light is at the vertical of the triangle -> 1
	//  - light is perpendicular to the triangle -> 0
	//  - light is behind the triangle -> 0
	float cosTheta = dot( n,l );
   
   color = vec4(.2,.2,.7,.15);
   
   if(cosTheta < 0.1){
      color.a = .15 * (1 - ((0.1-cosTheta)/1.1));
   }
   
}