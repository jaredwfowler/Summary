#ifndef ELEMENT_HPP
#define ELEMENT_HPP

/***************************************************************************************************
************************         |\/| o  _ ._ _  |  _   _   _.  _           ************************
************************         |  | | (_ | (_) | (/_ (_| (_| (_ \/        ************************
************************                                _|        /         ************************
************************                      Estd. 2015                    ************************
****************************************************************************************************
****************************************************************************************************
**** any purpose in any form or by any means without the written permission of Microlegacy is   ****
**** strictly prohibited.                                                                       ****
****                                                                                            ****
**** Confidential, Unpublished Property of Microlegacy.                                         ****
**** Use and Distribution Limited Solely to Authorized Personnel.                               ****
****                                                                                            ****
**** All Rights Reserved                                                                        ****
****************************************************************************************************
CREATOR ********************************************************************************************
****************************************************************************************************
****  Name:  Jared Fowler
**** Title:  Co-Founder of Microlegacy
****  Date:  March 14, 2017
**** Email:  jaredwfowler@hotmail.com
****************************************************************************************************
VERSION ********************************************************************************************
****************************************************************************************************
** Version #: 1.0
** Version Date: March 14, 2017
** Revision Personnel: JFowler,
****************************************************************************************************
ABOUT **********************************************************************************************
****************************************************************************************************
Built to be used by the class "Simulator". Simulator is a collection of models, textures, cameras,
etc.. Element will act as the ancestor class for all other classes used by Simulator. Every element
will be given a identifier. Simulator will make sure that the id is unique for every collection.
Each element will also keep a count of how many other objects are referencing it. The accuracy of
this count is up to the programmer to update appropriately.
****************************************************************************************************
***************************************************************************************************/
//Dependencies======================================================================================
//==================================================================================================
#include "Defines.hpp"

//Definition========================================================================================
//==================================================================================================
class Element
{
public: //##########################################################################################
   //Constructor(s)=================================================================================
   //===============================================================================================
   Element(const char* _id);

   //Destructor=====================================================================================
   //===============================================================================================
   ~Element(void);

   //Gets===========================================================================================
   //===============================================================================================
   virtual UINT32 getReferneceCount(void);
   ID_GL getID(void);

   //Do=============================================================================================
   //===============================================================================================
   bool incReferenceCount(void);
   bool decReferenceCount(void);

private: //#########################################################################################
   //Vars,typedefs,etc.=============================================================================
   //===============================================================================================
   ID_GL id;
   UINT32 refCount;


   // There should only need be one instance of each object.

   void operator= (const Element& m) {}
   Element(const Element& m);

};
//==================================================================================================
//End Definition====================================================================================

#endif
