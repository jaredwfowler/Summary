/*Created By: Jared Fowler
**yrolg4tseuq@sbcglobal.net
**June 2015
**
**ABOUT:
** Built to be used by the class "Simulator". Simulator is a collection of
** models, textures, cameras, etc.. Shader stores and utilizes the values
** generated by openGL. 
*/

#ifndef SHADER_HPP
#define SHADER_HPP

#include "Core/JWFs_openGL/Simulator.hpp"

class Simulator;

//CLASS :: Shader **********************************************************
//**************************************************************************
class Shader : public Element
{
public:
   // Constructor(s) / Destructor ###################################
   //################################################################
   Shader(const char* _id, Simulator* _simPtr, const char* _vertex, const char* _fragment);
   Shader(Shader& s);
   ~Shader(void);

   // gets and sets #################################################
   //################################################################
   inline GLuint getShaderID(void);
   inline GLuint getmMatrixID(void);
   inline GLuint getvMatrixID(void);
   inline GLuint getmvMatrixID(void);
   inline GLuint getmvpMatrixID(void);
   inline GLuint getRenderTextureID(void);
   std::vector<GLuint> getDepthMVPID(void);
   std::vector<GLuint> getDepthTextureID(void);
   std::vector<GLuint> getLightID(void);
   std::vector<GLuint> getTextureID(void);
   std::vector<GLuint> getRandomFloatID(void);

   // Helper Functions ##############################################
   //################################################################
   //****************************************************************
   //Loads and compiles the passed in shader files. Returns a handle
   //to the registered shader program. This function was provided by
   //the openGL tutorials : http://www.opengl-tutorial.org/
   //****************************************************************
   static GLuint LoadShaders(const char * vertex_file_path, const char * fragment_file_path);
   static GLuint LoadShaders(std::string VertexShaderCode, std::string FragmentShaderCode);

private:
   GLuint shaderID;
   GLuint mMatrixID;
   GLuint vMatrixID;
   GLuint mvMatrixID;
   GLuint mvpMatrixID;
   std::vector<GLuint> lightID;
   std::vector<GLuint> dbmvpID;
   std::vector<GLuint> depthTextureID;
   std::vector<GLuint> textureID;
   std::vector<GLuint> randomFloatID;
   GLuint renderTextureID;
   FILE_GL vertexShader;
   FILE_GL fragmentShader;
};

#endif